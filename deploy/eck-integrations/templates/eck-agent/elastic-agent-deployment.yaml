---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: eck-agent-deployment
  namespace: {{ .namespace | default $.Release.Namespace | quote }}
  labels:
    {{- include "elasticagent.labels" $ | nindent 4 }}
  annotations:
    {{- with .Values.eck_agent.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  version: {{ required "An Elastic Agent version is required" .Values.eck_agent.version }}
  configRef:
    secretName: eck-agent-deployment
  deployment:
    podTemplate:
      metadata:
        annotations:
          checksum/config: {{ include (print $.Template.BasePath "/eck-agent/elastic-agent-deployment-secret.yaml") . | sha256sum }}
      spec:
        automountServiceAccountToken: true
        nodeSelector:
          kubernetes.io/os: linux
        serviceAccountName: eck-agent-deployment
        containers:
        - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.10.0
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
          name: kube-state-metrics
          ports:
            - containerPort: 8080
              name: http-metrics
            - containerPort: 8081
              name: telemetry
          readinessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 5
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
        - name: agent
          securityContext:
            runAsUser: 0
          resources:
            limits:
              memory: 700Mi
            requests:
              cpu: 100m
              memory: 400Mi
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
